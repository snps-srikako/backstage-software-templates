apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-microservice
  title: New microservice for Synopsys Cloud microservice
  description: Synopsys Cloud microservice derive from Scaffold
  tags:
    - nodejs
    - nestjs
    - rdbms 
spec:
  owner: snps-srikako
  type: Microservice
  parameters:
    - title: Microservice Details
      required:
        - microservice_id
        - owner
      properties:
        microservice_id:
          title: Service Name
          type: string
          description: Unique name of the service
          ui:field: EntityNamePicker
        description:
          title: Service Description
          type: string
          description: Help others understand what this microservice is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Provide GitHub Details
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedOrganizations:
              - synopsys-inc #https://backstage.io/docs/features/software-templates/writing-templates/#the-repository-picker
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.microservice_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts:
          - github.com
        description: This is ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
